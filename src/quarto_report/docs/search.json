[
  {
    "objectID": "employment_growth_map.html",
    "href": "employment_growth_map.html",
    "title": "US Employment Growth by State",
    "section": "",
    "text": "Author: Martin Wong @ Autonomous Econ This is a demo site built using Quarto and Python. Check outthe full Substack post here.\nAverage home ownership has been dropping in each successive generation.\n\n\nCode\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom pypalettes import load_cmap\nimport matplotlib.patches as mpatches\nfrom drawarrow import fig_arrow, ax_arrow\nfrom highlight_text import fig_text, ax_text\nfrom pyfonts import load_font\nfrom datetime import datetime\n\n\n# Function to annotate states\ndef annotate_states(geo_df, ax, value_col):\n    \"\"\"\n    Annotates states on a geographic plot with their respective values.\n\n    Parameters:\n    - geo_df: GeoDataFrame containing geographic data, including centroids and state codes.\n    - ax: Matplotlib axis on which the annotations will be plotted.\n    - value_col: Column name containing the values to be displayed for each state.\n\n    The function adds state annotations with custom positioning and color based on the value.\n    \"\"\"\n    states_to_annotate = list(geo_df[\"STUSPS\"].unique())\n\n    for state in states_to_annotate:\n        # Get the centroid coordinates and rate for each state\n        centroid = geo_df.loc[geo_df[\"STUSPS\"] == state, \"centroid\"].values[0]\n        x, y = centroid.coords[0]\n        rate = geo_df.loc[geo_df[\"STUSPS\"] == state, value_col].values[0]\n        # Make small adjustments to annotation locations\n        try:\n            x += adjustments[state][0]\n            y += adjustments[state][1]\n        except KeyError:\n            pass\n\n        # Determine text color based on rate value\n        color_text = \"white\" if rate &gt;= 3 else text_color  # e.g., 'black'\n\n        # Set annotation text format based on state condition\n        if state in [\"NC\", \"VA\", \"TN\", \"KY\", \"NY\", \"HI\"]:\n            text = f\"&lt;{state.upper()}&gt;:{rate:.2f}\"\n        else:\n            text = f\"&lt;{state.upper()}&gt;\\n{rate:.2f}\"\n\n        # Add the annotation\n        ax_text(\n            x=x,\n            y=y,\n            s=text,\n            fontsize=8.5,\n            ha=\"center\",\n            va=\"center\",\n            font=other_font,\n            color=color_text,\n            ax=ax,\n            highlight_textprops=[{\"font\": other_bold_font}],\n        )\n\n\ndef annotate_state_with_arrows(\n    data,\n    fig,\n    state_code,\n    column_name,\n    tail_position,\n    head_position,\n    text_x,\n    text_y,\n    radius,\n):\n    \"\"\"\n    Annotates a state on a plot with an arrow and text label.\n\n    Parameters:\n    - data: DataFrame containing the data for states.\n    - fig: Plotly or matplotlib figure object.\n    - state_code: str, the two-letter code for the state to annotate (e.g., 'NJ').\n    - column_name: str, the column in the data containing the value to plot.\n    - tail_position: tuple, (x, y) starting position of the arrow.\n    - head_position: tuple, (x, y) end position of the arrow head.\n    - text_x: float, x-coordinate for text placement.\n    - text_y: float, y-coordinate for text placement.\n    \"\"\"\n    # Define arrow properties\n    arrow_props = dict(width=0.5, head_width=2, head_length=4, color=\"black\")\n\n    # Retrieve the value to annotate\n    state_value = data.loc[data[\"STUSPS\"] == state_code, column_name].values[0]\n\n    # Draw the arrow\n    fig_arrow(\n        tail_position=tail_position,\n        head_position=head_position,\n        radius=radius,\n        **arrow_props,\n    )\n\n    # Add the text annotation\n    fig_text(\n        s=f\"&lt;{state_code}&gt;: {state_value:.2f}\",\n        x=text_x,\n        y=text_y,\n        highlight_textprops=[{\"font\": other_bold_font}],\n        color=text_color,\n        fontsize=9,\n        font=other_font,\n        ha=\"center\",\n        va=\"center\",\n        fig=fig,\n    )\n\n\ndef plot_with_legend(data, ax, xlim, ylim):\n    \"\"\"\n    Plots the data on the provided axis with optional legend.\n\n    Parameters:\n    - data: GeoDataFrame to plot.\n    - ax: Matplotlib axis to plot on.\n    - xlim: Tuple for x-axis limits.\n    - ylim: Tuple for y-axis limits.\n    \"\"\"\n    # Plot data with custom color mapping\n    data.plot(\n        ax=ax,\n        color=data[\"binned\"].map(color_mapping),\n        edgecolor=\"white\",\n        linewidth=0.5,\n        legend=False,  # Disable automatic legend\n    )\n    ax.set_xlim(xlim)\n    ax.set_ylim(ylim)\n\n\n# Load the fonts\nfont = load_font(\n    \"https://github.com/dharmatype/Bebas-Neue/blob/master/fonts/BebasNeue(2018)ByDhamraType/ttf/BebasNeue-Regular.ttf?raw=true\"\n)\nother_font = load_font(\n    \"https://github.com/bBoxType/FiraSans/blob/master/Fira_Sans_4_3/Fonts/Fira_Sans_TTF_4301/Normal/Roman/FiraSans-Light.ttf?raw=true\"\n)\nother_bold_font = load_font(\n    \"https://github.com/bBoxType/FiraSans/blob/master/Fira_Sans_4_3/Fonts/Fira_Sans_TTF_4301/Normal/Roman/FiraSans-Medium.ttf?raw=true\"\n)\ntext_color = \"black\"\n\n# Offsets for individual state annotations\nadjustments = {\n    \"HI\": (+0.5, +1.5),\n    \"AK\": (0, +0.5),\n    \"SC\": (+0.3, -0.28),\n    \"LA\": (-0.5, 0),\n    \"VA\": (0, -0.5),\n    \"MI\": (+0.5, 0),\n    \"FL\": (+0.75, 0),\n    \"WV\": (-0.13, -0.2),\n}\n\n# Define custom colors for each bin\ncolor_mapping = {\n    \"-1-0%\": \"#FDDBC7FF\",  # Orange\n    \"0-1%\": \"#66F0FAFF\",  # Light blue\n    \"1-2%\": \"#66CCFFFF\",  # Slightly darker blue\n    \"2-3%\": \"#33B2FFFF\",  # Darker blue\n    \"3+%\": \"#035AA6FF\",  # Darkest blue\n}\n\n# States where we need annotations with arrows\noutside_state_codes = [\n    \"NJ\",\n    \"DE\",\n    \"DC\",\n    \"MD\",\n    \"VT\",\n    \"NH\",\n    \"MA\",\n    \"CT\",\n    \"RI\",\n]\n\n# Load employment data\nemployment_data = pd.read_csv(\n    \"../../data/processed/employment_state_apc_pivoted_20250222.csv\"\n)\n\n\n# Read the shapefile\nshapefile_path = \"../../data/raw/tl_2023_us_state.shp\"\ngdf = gpd.read_file(shapefile_path)\n\n# Merge data\ndata = gdf.merge(employment_data, how=\"inner\", left_on=\"STUSPS\", right_on=\"State\")\n\n# Get the set of states from both DataFrames\nstates_in_df1 = set(gdf[\"STUSPS\"])\nstates_in_df2 = set(employment_data[\"State\"])\n\n# Print states in df1 but not in df2\nstates_not_in_intersect = states_in_df1.symmetric_difference(states_in_df2)\n\n# Choropleth\n\n# Define column for plotting\ncolumn_to_plot = \"apc_20241201\"\n\n# Project the data to EPSG:5070 and calculate centroids.\n# A projection is a way to represent the 3D surface of the Earth on a 2D map.\n# A centroid is the geometric center or “average” point of a shape.\ndata_projected = data.to_crs(epsg=5070)\ndata_projected[\"centroid\"] = data_projected.geometry.centroid\n\n# Project centroids back to original CRS\ndata[\"centroid\"] = data_projected[\"centroid\"].to_crs(data.crs)\n\n# Add a binned column based on specified ranges\ndata[\"binned\"] = pd.cut(\n    data[column_to_plot],\n    bins=[-1, 0, 1, 2, 3, float(\"inf\")],\n    labels=[\"-1-0%\", \"0-1%\", \"1-2%\", \"2-3%\", \"3+%\"],\n)\n\n# Separate Alaska, Hawaii, and the contiguous U.S.\nalaska = data[data[\"NAME\"] == \"Alaska\"]\nhawaii = data[data[\"NAME\"] == \"Hawaii\"]\ncontiguous_us = data[(data[\"NAME\"] != \"Alaska\") & (data[\"NAME\"] != \"Hawaii\")]\n\n# Set up a 2x2 grid layout with custom size ratios\nnew_width = 20 * 0.5\nnew_height = 15 * 0.5\nfig, ax = plt.subplots(\n    2,\n    2,\n    figsize=(new_width, new_height),\n    dpi=300,\n    gridspec_kw={\"height_ratios\": [4, 1], \"width_ratios\": [1, 1]},\n)\n\n# Plot contiguous U.S. on the main subplot (spanning both columns in the first row)\nax_main = plt.subplot2grid((2, 2), (0, 0), colspan=2, fig=fig)\nplot_with_legend(contiguous_us, ax_main, xlim=(-130, -65), ylim=(24, 55))\n\n# Alaska plot in the second row, first column\nax_alaska = plt.subplot2grid((2, 2), (1, 0), fig=fig)\nplot_with_legend(alaska, ax_alaska, xlim=(-200, -100), ylim=(50, 73))\n\n# Hawaii plot in the second row, second column\nax_hawaii = plt.subplot2grid((2, 2), (1, 1), fig=fig)\nplot_with_legend(hawaii, ax_hawaii, xlim=(-162, -152), ylim=(18, 24))\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"MA\",\n    column_name=column_to_plot,\n    tail_position=(0.853, 0.65),\n    head_position=(0.815, 0.63),\n    text_x=0.88,\n    text_y=0.65,\n    radius=0.2,\n)\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"RI\",\n    column_name=column_to_plot,\n    tail_position=(0.863, 0.6),\n    head_position=(0.815, 0.62),\n    text_x=0.88,\n    text_y=0.6,\n    radius=-0.18,\n)\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"CT\",\n    column_name=column_to_plot,\n    tail_position=(0.86, 0.57),\n    head_position=(0.8, 0.62),\n    text_x=0.88,\n    text_y=0.57,\n    radius=-0.2,\n)\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"NJ\",\n    column_name=column_to_plot,\n    tail_position=(0.86, 0.525),\n    head_position=(0.775, 0.58),\n    text_x=0.87,\n    text_y=0.515,\n    radius=0.4,\n)\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"DE\",\n    column_name=column_to_plot,\n    tail_position=(0.83, 0.50),\n    head_position=(0.77, 0.565),\n    text_x=0.83,\n    text_y=0.49,\n    radius=0.35,\n)\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"MD\",\n    column_name=column_to_plot,\n    tail_position=(0.79, 0.48),\n    head_position=(0.76, 0.56),\n    text_x=0.79,\n    text_y=0.47,\n    radius=0.3,\n)\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"VT\",\n    column_name=column_to_plot,\n    tail_position=(0.76, 0.70),\n    head_position=(0.8, 0.67),\n    text_x=0.74,\n    text_y=0.7,\n    radius=-0.2,\n)\n\n# Annotate states with arrows\nannotate_state_with_arrows(\n    data,\n    fig,\n    state_code=\"NH\",\n    column_name=column_to_plot,\n    tail_position=(0.8, 0.73),\n    head_position=(0.815, 0.65),\n    text_x=0.78,\n    text_y=0.74,\n    radius=-0.1,\n)\n\n# Annotate the states\nannotate_states(\n    contiguous_us[~contiguous_us[\"STUSPS\"].isin(outside_state_codes)],\n    ax_main,\n    value_col=column_to_plot,\n)\nannotate_states(alaska, ax_alaska, value_col=column_to_plot)\nannotate_states(hawaii, ax_hawaii, value_col=column_to_plot)\n\nfor ax in fig.axes:\n    ax.set_axis_off()\n\n\nlegend_handles = [\n    mpatches.Patch(color=color, label=label) for label, color in color_mapping.items()\n]\n\nfig.legend(\n    handles=legend_handles,\n    loc=\"lower center\",\n    bbox_to_anchor=(\n        0.5,\n        0.02,\n    ),  # Position the legend at the bottom center of the figure\n    ncol=len(color_mapping),  # Arrange items in a single row\n    frameon=False,\n)\n\n# title\nfig_text(\n    s=\"Employment growth by State\",\n    x=0.15,\n    y=0.9,\n    color=text_color,\n    fontsize=24,\n    font=font,\n    ha=\"left\",\n    va=\"top\",\n    ax=ax,\n)\n\n# subtitle\nfig_text(\n    s=\"Total nonfarm employemnt, annual percent change (Dec 2024)\",\n    x=0.15,\n    y=0.85,\n    color=text_color,\n    fontsize=12,\n    font=other_font,\n    ha=\"left\",\n    va=\"top\",\n    ax=ax,\n)\n\n# credit\nfig_text(\n    s=\"Source: U.S. Bureau of Labour Statistics\",\n    x=0.93,\n    y=0.01,\n    color=text_color,\n    fontsize=8,\n    font=other_font,\n    ha=\"right\",\n    va=\"top\",\n    ax=ax,\n)\n\n# credit\nfig_text(\n    s=\"autonomousecon.substack.com\",\n    x=0.93,\n    y=0.03,\n    color=text_color,\n    fontsize=8,\n    font=other_font,\n    ha=\"right\",\n    va=\"top\",\n    ax=ax,\n)\n\nplt.subplots_adjust(hspace=0.04)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1"
  }
]